{
  "root_cmd_short": "Maltose 是一个轻量级、功能强大的 Go 框架，用于构建现代 Web 应用程序。",
  "root_cmd_long": "Maltose 提供了一种优雅简洁的方式来构建 Web 服务，\n专注于高性能、可扩展性和开发人员体验。\n它包括路由、中间件、配置管理等功能。",
  "gen_cmd_short": "生成各种代码（服务、模型等）",
  "gen_cmd_long": "代码生成命令的集合。",
  "dao_cmd_short": "基于现有模型生成 DAO 层。",
  "dao_cmd_long": "该命令会扫描 GORM 模型，并生成完整的数据访问对象 (DAO) 层，包括接口和实现。",
  "logic_cmd_short": "从服务定义生成逻辑文件",
  "logic_cmd_long": "基于包含服务接口定义的 Go 文件生成逻辑文件。",
  "model_cmd_short": "从数据库模式生成 GORM 模型",
  "model_cmd_long": "连接到数据库，并根据现有的表模式生成 GORM 模型文件。",
  "new_cmd_short": "创建一个新的 Maltose 项目。",
  "new_cmd_long": "通过克隆快速入门模板仓库来创建一个新的 Maltose 项目。\n它会自动替换新项目中 go.mod 文件的模块路径。",
  "openapi_cmd_short": "生成 OpenAPI v3 规范。",
  "openapi_cmd_long": "此命令通过解析 Go 源文件来生成 OpenAPI v3 规范文件。\n它有助于以标准格式记录您的 API。",
  "service_cmd_short": "从 api 定义生成控制器和服务文件",
  "service_cmd_long": "根据包含 API 定义（请求和响应的结构体）的 Go 文件生成控制器和服务文件。\n\n该命令默认使用 'api' 作为输入，'internal' 作为输出。\n您可以提供单个文件或目录作为输入。当提供目录时，\n它将递归查找所有 .go 文件。",
  "checking_for_updates": "正在检查更新...",
  "confirm_update": "Maltose CLI 有新版本可用：{{.NewVersion}}。您想更新到此版本吗？",
  "dao_generation_start": "正在开始生成 DAO 层...",
  "failed_to_get_abs_path": "获取绝对源路径失败：{{.Error}}",
  "go_mod_not_found": "找不到 go.mod 来确定模块信息：{{.Error}}。请在有效的 Go 模块中运行此命令。",
  "service_generation_success": "服务和控制器文件已成功生成。",
  "gorm_model_generation_start": "正在开始生成 GORM 模型...",
  "gorm_model_generation_success": "✅ GORM 模型已成功生成。",
  "openapi_generation_start": "正在从以下位置生成 OpenAPI 规范：{{.Source}}",
  "openapi_generation_success": "已成功生成 OpenAPI 规范到 {{.Output}}",
  "logic_generation_failed": "生成逻辑文件失败：{{.Error}}",
  "logic_generation_success": "逻辑文件已成功生成。",
  "new_project_creation_start": "正在 './{{.ProjectName}}' 中创建新的 Maltose 项目...",
  "new_project_template": "正在使用模板：{{.RepoURL}}",
  "new_project_clone_failed": "克隆模板仓库失败：{{.Error}}",
  "new_project_git_remove_failed": "删除 .git 目录失败：{{.Error}}",
  "new_project_go_mod_read_failed": "读取 go.mod 失败：{{.Error}}",
  "new_project_go_mod_write_failed": "写入更新后的 go.mod 失败：{{.Error}}",
  "new_project_success": "项目 '{{.ProjectName}}' 已成功创建。",
  "new_project_module_path_set": "模块路径已设置为 '{{.ModulePath}}'。",
  "new_project_get_started": "\n开始使用:",
  "new_project_get_started_cd": "  cd {{.ProjectName}}",
  "new_project_get_started_tidy": "  go mod tidy",
  "new_project_get_started_run": "  go run .",
  "dao_generation_success": "✅ DAO 层已成功生成。",
  "generic_error": "{{.Error}}",
  "dao_files_generation_start": "> 正在生成 dao 文件...",
  "generating_file": "  -> 正在生成 {{.Path}}",
  "skipping_file": "  -> 正在跳过 {{.Path}} (已存在)",
  "entity_files_generation_start": "> 正在生成 model 文件...",
  "format_source_failed": "格式化 {{.Path}} 的源码失败，正在写入未格式化的代码。错误：{{.Error}}",
  "env_file_not_found": "未找到 '.env' 文件。正在为您创建一个 '.env.example' \n 请将 '.env.example' 复制到 '.env' 并填写数据库凭据",
  "loading_env_file": "🔎 正在加载 .env 文件...",
  "connecting_to_database": "⚡ 正在连接到数据库...",
  "inspecting_database": "🔍 正在检查数据库模式...",
  "found_tables": "✔ 已找到 {{.Count}} 个表。",
  "scanning_directory": "正在扫描目录: {{.Path}}",
  "found_api_definitions": "发现 {{.Count}} 个 API 接口定义。",
  "not_have_service_interface": "当前文件没有 service 接口, 跳过 logic 生成。",
  "logic_file_uptodate": "⏩ Logic 文件 {{.File}} 已是最新, 无需改动。",
  "logic_methods_appended": "✅ 已向 {{.File}} 追加 {{.Count}} 个新方法。",
  "logic_gen_skip_method_not_func": "⚠️ 因方法 '{{.Method}}' (服务 '{{.Service}}') 不是函数，已跳过。",
  "logic_gen_skip_method_bad_params": "⚠️ 因方法 '{{.Method}}' (服务 '{{.Service}}') 参数不规范，已跳过。期望格式：'(ctx context.Context, req *YourReq)'.",
  "logic_gen_skip_method_bad_results": "⚠️ 因方法 '{{.Method}}' (服务 '{{.Service}}') 返回值不规范，已跳过。期望格式：'(*YourRes, error)'."
}

{
  "root_cmd_short": "Maltose is a lightweight and powerful Go framework for building modern web applications.",
  "root_cmd_long": "Maltose provides an elegant and concise way to build web services, \nwith a focus on high performance, scalability, and developer experience.\nIt includes features like routing, middleware, configuration management, and more.",
  "gen_cmd_short": "Generate various codes (service, model, etc.)",
  "gen_cmd_long": "A collection of code generation commands.",
  "dao_cmd_short": "Generate DAO layer based on existing models.",
  "dao_cmd_long": "This command scans for GORM models and generates a complete data access object (DAO) layer, including interfaces and implementations.",
  "logic_cmd_short": "Generate logic file from service definitions",
  "logic_cmd_long": "Generate logic file based on Go files containing service interface definitions.",
  "model_cmd_short": "Generate GORM models from database schema",
  "model_cmd_long": "Connects to a database and generates GORM model files based on the existing table schemas.",
  "new_cmd_short": "Create a new Maltose project.",
  "new_cmd_long": "Creates a new Maltose project by cloning the quickstart template repository.\nIt automatically replaces the module path in the new project's go.mod file.",
  "openapi_cmd_short": "Generate OpenAPI v3 specification.",
  "openapi_cmd_long": "This command generates an OpenAPI v3 specification file by parsing Go source files.\nIt helps in documenting your API in a standard format.",
  "service_cmd_short": "Generate controller and service files from api definitions",
  "service_cmd_long": "Generate controller and service files based on Go files containing API\ndefinitions (structs for request and response).\n\nThe command defaults to using 'api' as input and 'internal' as output.\nYou can provide a single file or a directory as input. When a directory is provided,\nit will recursively find all .go files.",
  "checking_for_updates": "Checking for updates...",
  "confirm_update": "A new version of Maltose CLI is available: {{.NewVersion}}. Do you want to update to this version?",
  "dao_generation_start": "Starting DAO layer generation...",
  "failed_to_get_abs_path": "Failed to get absolute source path: {{.Error}}",
  "go_mod_not_found": "Could not find go.mod to determine module info: {{.Error}}. Please run this command in a valid Go module.",
  "service_generation_success": "Service and controller files generated successfully.",
  "gorm_model_generation_start": "Starting GORM model generation...",
  "gorm_model_generation_success": "✅ GORM models generated successfully.",
  "openapi_generation_start": "Generating OpenAPI spec from: {{.Source}}",
  "openapi_generation_success": "Successfully generated OpenAPI specification to {{.Output}}",
  "logic_generation_failed": "Failed to generate logic file: {{.Error}}",
  "logic_generation_success": "Logic file generated successfully.",
  "new_project_creation_start": "Creating a new Maltose project in './{{.ProjectName}}'...",
  "new_project_template": "Using template from: {{.RepoURL}}",
  "new_project_clone_failed": "Cloning template repository failed: {{.Error}}",
  "new_project_git_remove_failed": "Failed to remove .git directory: {{.Error}}",
  "new_project_go_mod_read_failed": "Failed to read go.mod: {{.Error}}",
  "new_project_go_mod_write_failed": "Failed to write updated go.mod: {{.Error}}",
  "new_project_success": "Project '{{.ProjectName}}' created successfully.",
  "new_project_module_path_set": "Module path set to '{{.ModulePath}}'.",
  "new_project_get_started": "\nTo get started:",
  "new_project_get_started_cd": "  cd {{.ProjectName}}",
  "new_project_get_started_tidy": "  go mod tidy",
  "new_project_get_started_run": "  go run .",
  "dao_generation_success": "✅ DAO layer generated successfully.",
  "generic_error": "{{.Error}}",
  "dao_files_generation_start": "H Generating dao files...",
  "generating_file": "  -> Generating {{.Path}}",
  "skipping_file": "  -> Skipping {{.Path}} (already exists)",
  "entity_files_generation_start": "H Generating entity files...",
  "format_source_failed": "failed to format source for {{.Path}}, writing unformatted code. Error: {{.Error}}",
  "env_file_not_found": "'.env' file not found. Creating a '.env.example' for you.",
  "loading_env_file": "🔎 Loading .env file...",
  "connecting_to_database": "⚡ Connecting to the database...",
  "inspecting_database": "🔍 Inspecting database schema...",
  "found_tables": "✔ Found {{.Count}} tables.",
  "scanning_directory": "Scanning directory: {{.Path}}",
  "found_api_definitions": "Found {{.Count}} API endpoint definitions.",
  "not_have_service_interface": "The file does not contain a service interface, skipping logic generation."
}

package gen

const (
	// TplGenController is the template for generating controller files.
	TplGenController = `// =================================================================================
	// This is auto-generated by Maltose
	// =================================================================================
	package {{.Module}}

	import (
		"context"

		"{{.ApiModule}}"
		svc "{{.SvcModule}}"
	)

	type {{.Controller}} struct{}

	func New{{.Controller}}() *{{.Controller}} {
		return &{{.Controller}}{}
	}

	{{range .Functions}}
	func (c *{{.Controller}}) {{.Name}}(ctx context.Context, req *{{.ApiPkg}}.{{.ReqName}}) (res *{{.ApiPkg}}.{{.ResName}}, err error) {
		res, err = svc.{{.Service}}().{{.Name}}(ctx, req)
		return
	}
	{{end}}
	`

	// TplGenService is the template for generating service files.
	TplGenService = `// =================================================================================
	// This is auto-generated by Maltose
	// =================================================================================
	package {{.Module}}

	import (
		"context"
		
		"{{.ApiModule}}"
	)
	{{if .Interface}}
	type I{{.Service}} interface {
		{{range .Functions}}
		{{.Name}}(ctx context.Context, req *{{.ApiPkg}}.{{.ReqName}}) (res *{{.ApiPkg}}.{{.ResName}}, err error)
		{{end}}
	}

	var local{{.Service}} I{{.Service}}

	func {{.Service}}() I{{.Service}} {
		if local{{.Service}} == nil {
			local{{.Service}} = New{{.Service}}()
		}
		return local{{.Service}}
	}

	type s{{.Service}} struct{}

	func New{{.Service}}() I{{.Service}} {
		return &s{{.Service}}{}
	}

	{{range .Functions}}
	func (s *s{{.Service}}) {{.Name}}(ctx context.Context, req *{{.ApiPkg}}.{{.ReqName}}) (res *{{.ApiPkg}}.{{.ResName}}, err error) {
		// TODO: Implement the business logic of {{.Name}}.
		res = new({{.ApiPkg}}.{{.ResName}})
		return
	}
	{{end}}

	{{else}}
	type {{.Service}} struct{}

	func New{{.Service}}() *{{.Service}} {
		return &{{.Service}}{}
	}

	var local{{.Service}} *{{.Service}}

	func {{.Service}}() *{{.Service}} {
		if local{{.Service}} == nil {
			local{{.Service}} = New{{.Service}}()
		}
		return local{{.Service}}
	}

	{{range .Functions}}
	func (s *{{.Service}}) {{.Name}}(ctx context.Context, req *{{.ApiPkg}}.{{.ReqName}}) (res *{{.ApiPkg}}.{{.ResName}}, err error) {
		// TODO: Implement the business logic of {{.Name}}.
		res = new({{.ApiPkg}}.{{.ResName}})
		return
	}
	{{end}}
	{{end}}
	`

	// TplGenEntity is the template for generating model entity files.
	TplGenEntity = `// =================================================================================
	// This is auto-generated by Maltose
	// =================================================================================
	package entity

	// {{.StructName}} is the entity for the {{.TableName}} table.
	type {{.StructName}} struct {
	{{- range .Columns}}
	    {{.GoName}} {{.GoType}} ` + "`gorm:\"column:{{.Name}}\"`" + ` // {{.Comment}}
	{{- end}}
	}

	// TableName returns the name of the table.
	func (e *{{.StructName}}) TableName() string {
	    return "{{.TableName}}"
	}
	`

	// TplGenDaoInternal is the template for generating internal DAO files.
	TplGenDaoInternal = `// =================================================================================
	// This is auto-generated by Maltose
	// =================================================================================
	package internal

	import (
		"context"
		"github.com/graingo/maltose/errors"
		"gorm.io/gorm"

		"{{.PackageName}}/internal/model/entity"
	)

	type {{.InternalDaoName}} struct {
		DB *gorm.DB
	}

	func New{{.InternalDaoName}}(db *gorm.DB) *{{.InternalDaoName}} {
		return &{{.InternalDaoName}}{DB: db}
	}

	func (d *{{.InternalDaoName}}) Create(ctx context.Context, data *entity.{{.StructName}}) error {
		return d.DB.WithContext(ctx).Create(data).Error
	}

	func (d *{{.InternalDaoName}}) Update(ctx context.Context, data *entity.{{.StructName}}) error {
		return d.DB.WithContext(ctx).Save(data).Error
	}

	func (d *{{.InternalDaoName}}) Delete(ctx context.Context, id any) error {
		return d.DB.WithContext(ctx).Delete(&entity.{{.StructName}}{}, id).Error
	}

	func (d *{{.InternalDaoName}}) GetByID(ctx context.Context, id any) (*entity.{{.StructName}}, error) {
		var result entity.{{.StructName}}
		err := d.DB.WithContext(ctx).First(&result, id).Error
		if err != nil {
			if errors.Is(err, gorm.ErrRecordNotFound) {
				return nil, nil // Or return a specific not-found error
			}
			return nil, err
		}
		return &result, nil
	}

	func (d *{{.InternalDaoName}}) GetList(ctx context.Context, page, pageSize int) ([]*entity.{{.StructName}}, int64, error) {
		var (
			list  []*entity.{{.StructName}}
			total int64
		)
		
		db := d.DB.WithContext(ctx).Model(&entity.{{.StructName}}{})

		err := db.Count(&total).Error
		if err != nil {
			return nil, 0, err
		}

		err = db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&list).Error
		if err != nil {
			return nil, 0, err
		}

		return list, total, nil
	}
	`

	// TplGenDao is the template for generating user-extendable DAO files.
	TplGenDao = `// =================================================================================
	// This is auto-generated by Maltose. It's for extending DAO functionalities.
	// =================================================================================
	package dao

	import (
		"{{.PackageName}}/internal/dao/internal"
		"{{.PackageName}}/internal/db"
	)

	type {{.DaoName}} struct {
		*internal.{{.InternalDaoName}}
	}

	var (
		// {{.FirstLowerDaoName}} is the instance of {{.DaoName}}.
		{{.FirstLowerDaoName}} = New{{.DaoName}}()
	)

	func New{{.DaoName}}() *{{.DaoName}} {
		return &{{.DaoName}}{
			internal.New{{.InternalDaoName}}(db.Instance()),
		}
	}
	`
)

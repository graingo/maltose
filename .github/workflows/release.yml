name: 手动发布 - 更新依赖并标记所有模块

on:
  # 允许从 GitHub Actions UI 手动触发此工作流
  workflow_dispatch:
    inputs:
      version:
        description: "要发布的版本 (例如: v0.1.0)"
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要写权限才能将提交和标签推送回仓库
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: "1.23" # 确保此版本与您的项目匹配

      - name: 配置 Git 用户
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 更新依赖、提交、打标签并推送
        run: |
          # 如果任何命令失败，立即退出
          set -e

          VERSION=${{ github.event.inputs.version }}

          # 验证版本格式 (必须是 vX.Y.Z)
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::版本格式不正确，必须为 vX.Y.Z 格式。"
            exit 1
          fi

          # --- [1/3] 更新子模块依赖 ---
          echo "===== [1/3] 正在更新子模块依赖... ====="
          find . -name go.mod | while read -r mod_file; do
            dir=$(dirname "$mod_file")
            if [ "$dir" == "." ]; then
              continue
            fi
            module_path=${dir#./}
            echo "-> 正在处理模块: $module_path"
            (
              cd "$dir"
              # 移除本地 replace 指令，确保从远程仓库拉取
              if grep -q "github.com/graingo/maltose =>" go.mod; then
                go mod edit -dropreplace=github.com/graingo/maltose
              fi
              # 将依赖设置为新版本
              go mod edit -require="github.com/graingo/maltose@$VERSION"
              go mod tidy
            )
          done
          echo "=========================================="
          echo ""

          # --- [2/3] 提交变更 ---
          echo "===== [2/3] 正在提交变更... ====="
          # 检查是否有文件变更需要提交
          if [[ -z $(git status -s --untracked-files=no) ]]; then
            echo "-> 没有文件变更需要提交。"
          else
            echo "-> 正在提交所有 go.mod 和 go.sum 文件的变更..."
            git add .
            git commit -m "chore(release): 为 $VERSION 更新依赖"
          fi
          echo "================================"
          echo ""

          # --- [3/3] 创建并推送标签 ---
          echo "===== [3/3] 正在创建并推送标签... ====="
          echo "-> 正在为根模块打标签: $VERSION"
          git tag "$VERSION"

          # 查找所有子目录中的 go.mod 文件并为其打标签
          find . -name go.mod | while read -r mod_file; do
            dir=$(dirname "$mod_file")
            if [ "$dir" == "." ]; then
              continue
            fi
            module_path=${dir#./}
            TAG_NAME="${module_path}/${VERSION}"
            echo "-> 正在为子模块 '$module_path' 打标签: $TAG_NAME"
            git tag "$TAG_NAME"
          done
          echo "===================================="

          echo ""
          echo "正在将提交和所有标签推送到远程仓库..."
          git push origin HEAD
          git push origin --tags

          echo "✅ 发布流程成功完成！"

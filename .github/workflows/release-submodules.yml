name: Release Submodules on Tag

on:
  push:
    tags:
      - "v*" # Trigger on tags like v0.1.0, v1.2.3 etc.

jobs:
  release-submodules:
    runs-on: ubuntu-latest
    # This permission is required to push commits and tags back to the repository.
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # We need to fetch the entire history and all tags.
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract tag name from ref
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Prepare dependencies and Tag Submodules
        run: |
          set -e
          VERSION=${{ env.TAG_NAME }}

          echo "Triggered by root tag: $VERSION"
          echo ""

          # --- Step 1: Update dependencies based on rules ---
          echo "===== [1/3] Updating submodule dependencies ====="
          find . -name go.mod | while read -r mod_file; do
            dir=$(dirname "$mod_file")
            if [ "$dir" == "." ]; then
              continue
            fi
            
            module_path=${dir#./}
            echo "-> Processing module: $module_path"
            
            ( # Use subshell to avoid changing directory
              cd "$dir"
              # Rule: remove replace for cmd/maltose
              if [[ "$module_path" == "cmd/maltose" ]]; then
                echo "   - [CMD Rule] Removing replace directive..."
                if grep -q "github.com/graingo/maltose =>" go.mod; then
                  go mod edit -dropreplace=github.com/graingo/maltose
                fi
              # Rule: keep replace for contrib/*
              elif [[ "$module_path" == contrib/* ]]; then
                echo "   - [CONTRIB Rule] Preserving replace directive."
                # No action needed
              fi
              
              echo "   - Setting maltose dependency to $VERSION..."
              go mod edit -require="github.com/graingo/maltose@$VERSION"
              echo "   - Tidying go.mod..."
              go mod tidy
            )
          done
          echo "=========================================="
          echo ""

          # --- Step 2: Commit the dependency changes ---
          echo "===== [2/3] Committing dependency changes ====="
          # Check if there are any changes to commit.
          if git diff-index --quiet HEAD --; then
              echo "-> No dependency changes to commit."
          else
              echo "-> Committing dependency alignment for $VERSION..."
              git add .
              git commit -m "chore(release): align dependencies for $VERSION"
              # Push the new commit back to the branch the tag was on.
              git push
          fi
          echo "=========================================="
          echo ""

          # --- Step 3: Tag all submodules ---
          echo "===== [3/3] Creating and pushing tags ====="
          find . -name go.mod | while read -r mod_file; do
            dir=$(dirname "$mod_file")
            # Skip the root module, as it's already tagged.
            if [ "$dir" == "." ]; then
              continue
            fi
            
            module_path=${dir#./}
            TAG_NAME="${module_path}/${VERSION}"
            
            echo "   - Creating tag '$TAG_NAME' for module '$module_path'"
            git tag "$TAG_NAME"
          done

          # --- Step 4: Push all the new tags at once ---
          echo ""
          echo "-> Pushing all new submodule tags..."
          git push origin --tags

          echo "âœ… Submodule release process completed successfully!"
